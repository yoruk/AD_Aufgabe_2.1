public class Item {
  //Item SETUP  
	
	DECLARE int productPosX;
    DECLARE int productPosY;
    DECLARE int productSize;
    DECLARE int item_id;
    DECLARE static int idCounter;
   
    //Item PROCEDURE
		Item(int productPosX, int productPosY, int productSize, int item_id) {

		this.productPosX = productPosX;
		this.productPosY = productPosY;
        this.productSize = productSize;
        this.item_id = item_id;
	}
	     int productPosX() {
        return productPosX;
    }
    
     int productPosY() {
        return productPosY;
    }
    
     int size() {
        return productSize;
    }
    
     int id() {
        return item_id;
    }
    
     static List<Item> factory() {
        int temp_N = (Simulation.TEST) ? JUnitTestframe.N : Simulation.N;
        int temp_NUMBOXINGPLANTS = (Simulation.TEST) ? JUnitTestframe.NUMBOXINGPLANTS : Simulation.NUMBOXINGPLANTS;
        int temp_ORDERMAXSIZE = (Simulation.TEST) ? JUnitTestframe.ORDERMAXSIZE : Simulation.ORDERMAXSIZE;
        
		DECLARE List<Item> itemList = new ArrayList<Item>();
		DECLARE  int maxSize;
        
		DECLARE  idCounter = 1;
        
        FOR(int y=0; y<temp_N; y++) 
            for(int x=0; x<temp_N; x++) 
                IF((x >= temp_N - temp_NUMBOXINGPLANTS) && y == temp_N-1) 
                    break;
                 END IF

                maxSize = (int)((CALL Math.random()) * temp_ORDERMAXSIZE + 1);
                
				CALL  itemList.add(NEWOBJECT Item(x, y, maxSize, idCounter));
                
                idCounter++;
             END FOR
         END FOR
        
        return itemList;
    }

    @Override
		String toString() {
        return "Item - ID: " + item_id + " Size: " + productSize 
                + " Pos x/y: " + productPosX + "/" + productPosY;
    }
        END WHILE
 
    END MAIN()
END CLASS